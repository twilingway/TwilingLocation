import AsyncStorage from "@react-native-async-storage/async-storage";
import * as Location from "expo-location";
import React, { useEffect, useState } from "react";
import { Button, ScrollView, StyleSheet, Text, View } from "react-native";
import TrackList from "../../components/TrackList";
import { startLocationUpdates } from "../../tasks/locationTask";
import emitter from "../../utils/eventEmitter";
import {
  clearActiveTrack,
  generateNextTrackName,
  getActiveTrackName,
  setActiveTrackName,
} from "../../utils/trackManager";

// —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç
import * as TaskManager from "expo-task-manager";
const LOCATION_TASK_NAME = "background-location-task";

TaskManager.defineTask("LocationTask", async () => {
  await startLocationUpdates();
});

export default function IndexScreen() {
  const [activeTrack, setActiveTrack] = useState<string | null>(null);
  const [currentLocation, setCurrentLocation] =
    useState<Location.LocationObject | null>(null);

  useEffect(() => {
    let subscription: Location.LocationSubscription;

    const init = async () => {
      const fg = await Location.requestForegroundPermissionsAsync();
      const bg = await Location.requestBackgroundPermissionsAsync();

      if (fg.status !== "granted" || bg.status !== "granted") return;

      const track = await getActiveTrackName();
      setActiveTrack(track);

      if (track) {
        const isRunning =
          await Location.hasStartedLocationUpdatesAsync(LOCATION_TASK_NAME);
        if (!isRunning) await startLocationUpdates();
      }

      subscription = await Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.Highest,
          timeInterval: 5000,
          distanceInterval: 0,
        },
        (loc) => setCurrentLocation(loc)
      );
    };

    init();
    return () => subscription && subscription.remove();
  }, []);

  const handleStartNew = async () => {
    const name = await generateNextTrackName();
    await setActiveTrackName(name);
    setActiveTrack(name);

    await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME).catch(() => {});
    await startLocationUpdates();
  };

  const handleStop = async () => {
    await clearActiveTrack();
    setActiveTrack(null);
  };

  const handleResume = async () => {
    const keys = await AsyncStorage.getAllKeys();
    const validTracks = keys.filter((k) =>
      /^track_\d{4}-\d{2}-\d{2}_\d+$/.test(k)
    );
    const sorted = validTracks.sort((a, b) => b.localeCompare(a));
    const lastTrack = sorted[0];

    if (lastTrack) {
      await setActiveTrackName(lastTrack);
      setActiveTrack(lastTrack);
    } else {
      const name = await generateNextTrackName();
      await setActiveTrackName(name);
      setActiveTrack(name);
    }

    await new Promise((res) => setTimeout(res, 200));
    await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME).catch(() => {});
    await startLocationUpdates();
  };

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View style={{ marginBottom: 16 }}>
        <Button
          title="üö¶ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–∫–∏–Ω–≥"
          color="#cc0000"
          onPress={() =>
            Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME)
              .then(() => {
                console.log("‚èπ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
              })
              .catch(console.warn)
          }
        />
        <Button
          title="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤—ã–π —Ç—Ä–µ–∫–∏–Ω–≥"
          onPress={() =>
            Location.hasStartedLocationUpdatesAsync(LOCATION_TASK_NAME)
              .then(async (isRunning) => {
                if (!isRunning) {
                  await startLocationUpdates();
                  console.log("‚ñ∂Ô∏è –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é");
                }
              })
              .catch(console.warn)
          }
        />
      </View>

      <Button
        title="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë"
        color="#cc0000"
        onPress={() => {
          (async () => {
            await Location.stopLocationUpdatesAsync(LOCATION_TASK_NAME).catch(
              () => {}
            );
            await AsyncStorage.clear();

            const newTrack = await generateNextTrackName();
            await setActiveTrackName(newTrack);
            setActiveTrack(newTrack);

            emitter.emit("trackUpdated", []);
            console.log(
              "üßº AsyncStorage –æ—á–∏—â–µ–Ω –∏ –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ —Å–æ–∑–¥–∞–Ω:",
              newTrack
            );

            const fg = await Location.requestForegroundPermissionsAsync();
            const bg = await Location.requestBackgroundPermissionsAsync();
            if (fg.status === "granted" && bg.status === "granted") {
              await startLocationUpdates();
            }
          })();
        }}
      />

      <View style={styles.currentLocation}>
        <Text style={styles.title}>–¢–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</Text>
        {currentLocation ? (
          <>
            <Text selectable>
              –®–∏—Ä–æ—Ç–∞: {currentLocation.coords.latitude.toFixed(6)}
            </Text>
            <Text selectable>
              –î–æ–ª–≥–æ—Ç–∞: {currentLocation.coords.longitude.toFixed(6)}
            </Text>
            <Text>
              –°–∫–æ—Ä–æ—Å—Ç—å: {(currentLocation.coords.speed ?? 0).toFixed(2)} –º/—Å
            </Text>
            <Text>
              –û–±–Ω–æ–≤–ª–µ–Ω–æ:{" "}
              {new Date(currentLocation.timestamp).toLocaleTimeString()}
            </Text>
            <View style={{ flexDirection: "row", gap: 12, marginTop: 8 }}>
              <Button
                title="üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
                onPress={() => {
                  const text = `${currentLocation.coords.latitude}, ${currentLocation.coords.longitude}`;
                  require("expo-clipboard").setStringAsync(text);
                }}
              />
              <Button
                title="üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
                onPress={() => {
                  const text = `–ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: https://maps.google.com/?q=${currentLocation.coords.latitude},${currentLocation.coords.longitude}`;
                  require("expo-sharing").shareAsync(undefined, {
                    dialogTitle: "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏",
                    mimeType: "text/plain",
                    UTI: "public.plain-text",
                    message: text,
                  });
                }}
              />
            </View>
          </>
        ) : (
          <Text>–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç...</Text>
        )}
      </View>

      <View>
        <Text style={styles.title}>–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–∫: {activeTrack ?? "–Ω–µ—Ç"}</Text>
        {activeTrack ? (
          <Button title="‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫" onPress={handleStop} />
        ) : (
          <>
            <Button title="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–µ–∫" onPress={handleStartNew} />
            <Button title="üîÅ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç—Ä–µ–∫" onPress={handleResume} />
          </>
        )}
      </View>

      <TrackList />
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flexGrow: 1, padding: 16 },
  currentLocation: { marginBottom: 16 },
  title: { fontSize: 16, fontWeight: "bold" },
});
