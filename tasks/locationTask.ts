import * as TaskManager from "expo-task-manager";
import * as Location from "expo-location";
import AsyncStorage from "@react-native-async-storage/async-storage";
import emitter from "../utils/eventEmitter";
import { getActiveTrackName } from "../utils/trackManager";

const LOCATION_TASK_NAME = "background-location-task";

interface LocationData {
  locations: Location.LocationObject[];
}

TaskManager.defineTask<LocationData>(
  LOCATION_TASK_NAME,
  async ({ data, error }) => {
    if (error) {
      console.log("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:", error.message);
      return;
    }

    if (!data || !data.locations || data.locations.length === 0) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏");
      return;
    }

    const { locations } = data;
    const trackName = await getActiveTrackName();
    if (!trackName) {
      console.log("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –±—É–¥—É—Ç –∑–∞–ø–∏—Å–∞–Ω—ã");
      return;
    }

    try {
      const existingData = await AsyncStorage.getItem(trackName);
      const existingTrack: Location.LocationObject[] = existingData
        ? JSON.parse(existingData)
        : [];

      const updatedTrack = [...existingTrack, ...locations];

      await AsyncStorage.setItem(trackName, JSON.stringify(updatedTrack));

      console.log(
        "üì¶ trackUpdated :>>",
        new Date().toISOString(),
        "| —Ç–æ—á–µ–∫ –≤—Å–µ–≥–æ:",
        updatedTrack.length
      );

      emitter.emit("trackUpdated", updatedTrack);
    } catch (storageError) {
      console.error("‚ùå AsyncStorage error:", storageError);
    }
  }
);

export async function startLocationUpdates(): Promise<void> {
  console.log("üì° –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ...");
  const { status } = await Location.requestBackgroundPermissionsAsync();
  if (status === Location.PermissionStatus.GRANTED) {
    await Location.startLocationUpdatesAsync("background-location-task", {
      accuracy: Location.Accuracy.High,
      timeInterval: 10000,
      distanceInterval: 10,
      showsBackgroundLocationIndicator: true,
      foregroundService: {
        notificationTitle: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞",
        notificationBody: "–¢—Ä–µ–∫–∏–Ω–≥ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ —Ñ–æ–Ω–µ.",
      },
    });
    console.log("‚úÖ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞");
  } else {
    console.error("‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Ñ–æ–Ω–æ–≤—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
  }
}
